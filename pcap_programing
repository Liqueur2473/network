#include <stdlib.h>
#include <stdio.h>
#include <pcap.h>
#include <arpa/inet.h>

/* Ethernet header */
struct ethheader {
  u_char  ether_dhost[6]; /* destination host address */
  u_char  ether_shost[6]; /* source host address */
  u_short ether_type;     /* protocol type (IP, ARP, RARP, etc) */
};

/* IP Header */
struct ipheader {
  // ... (기존 IP 헤더 정의)
};

/* TCP Header */
struct tcpheader {
  u_short th_sport; // Source Port
  u_short th_dport; // Destination Port
  // ... (다른 TCP 헤더 필드, 예를 들어, th_seq, th_ack 등)
};

void got_packet(u_char *args, const struct pcap_pkthdr *header,
                              const u_char *packet)
{
  struct ethheader *eth = (struct ethheader *)packet;

  if (ntohs(eth->ether_type) == 0x0800) { // 0x0800 is IP type
    struct ipheader *ip = (struct ipheader *)
                         (packet + sizeof(struct ethheader)); 

    if (ip->iph_protocol == IPPROTO_TCP) {
      struct tcpheader *tcp = (struct tcpheader *)
                             (packet + sizeof(struct ethheader) + sizeof(struct ipheader));

      printf("    From MAC: %02x:%02x:%02x:%02x:%02x:%02x\n", 
             eth->ether_shost[0], eth->ether_shost[1], eth->ether_shost[2], 
             eth->ether_shost[3], eth->ether_shost[4], eth->ether_shost[5]);

      printf("      To MAC: %02x:%02x:%02x:%02x:%02x:%02x\n", 
             eth->ether_dhost[0], eth->ether_dhost[1], eth->ether_dhost[2], 
             eth->ether_dhost[3], eth->ether_dhost[4], eth->ether_dhost[5]);

      printf("       From: %s\n", inet_ntoa(ip->iph_sourceip));   
      printf("         To: %s\n", inet_ntoa(ip->iph_destip));    

      printf(" Source Port: %d\n", ntohs(tcp->th_sport));
      printf("Destination Port: %d\n", ntohs(tcp->th_dport));
    }
  }
}

int main()
{
  pcap_t *handle;
  char errbuf[PCAP_ERRBUF_SIZE];
  struct bpf_program fp;
  char filter_exp[] = "tcp"; // 수정: TCP 패킷만 캡처
  bpf_u_int32 net;

  // Step 1: Open live pcap session on NIC with name enp0s3
  handle = pcap_open_live("ens33", BUFSIZ, 1, 1000, errbuf);

  // Step 2: Compile filter_exp into BPF psuedo-code
  pcap_compile(handle, &fp, filter_exp, 0, net);
  if (pcap_setfilter(handle, &fp) !=0) {
      pcap_perror(handle, "Error:");
      exit(EXIT_FAILURE);
  }

  // Step 3: Capture packets
  pcap_loop(handle, -1, got_packet, NULL);

  pcap_close(handle);   //Close the handle
  return 0;
}
